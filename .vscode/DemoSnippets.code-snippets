{
	// Place your CmdMvu workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"stypes": {
        "prefix": "stypes",
        "body": [
            "type OrgNr = OrgNr of string",
            "module OrgNr =",
            "\tlet value (OrgNr value) = value",
            "",
            "type SearchCompanyResult = { Name: string; OrgNr: OrgNr }",
            "",
            "type SearchCompanyResults =",
            "\t{ SearchTerm: string",
            "\t  SearchResult: SearchCompanyResult seq }"
        ],
        "description": "Supporting types"
    },
	"fullmodel": {
        "prefix": "fmodel",
        "body": [
            "type Model =",
            "\t| StartScreen",
            "\t| SearchCompany",
            "\t| NoCompanyFound of string",
            "\t| SearchCompanyResult of SearchCompanyResults",
            "\t| CompanyDetails of SearchCompanyResults * string",
            "\t| Exit"
        ],
        "description": "Full model"
    },
	"fmessage": {
        "prefix": "fmessage",
        "body": [
            "type Message =",
            "\t| ShowSearch",
            "\t| SearchForCompany of string",
            "\t| ShowCompanyDetails of OrgNr",
            "\t| BackToSearchResult",
            "\t| ExitScreen",
            "\t| Exited"
        ],
        "description": "Full message"
    },
	"fullview": {
        "prefix": "fview",
        "body": [
            "let view model =",
            "\tmatch model with",
            "\t| StartScreen ->",
            "\t\tlet selectionOptions =",
            "\t\t\t[ \"Search for company\"; \"Exit\" ]",
            "\t\t\t|> List.map Choice",
            "",
            "\t\tconsole {",
            "\t\t\tfiglet {",
            "\t\t\t\ttext \"Company searcher 2000\"",
            "\t\t\t\taligned Left",
            "\t\t\t}",
            "",
            "\t\t\tlet choice =",
            "\t\t\t\tselection {",
            "\t\t\t\t\ttitle \"Choose action\"",
            "\t\t\t\t\tchoices selectionOptions",
            "\t\t\t\t}",
            "",
            "\t\t\treturn",
            "\t\t\t\tmatch choice with",
            "\t\t\t\t| Choice \"Exit\" -> Message.ExitScreen",
            "\t\t\t\t| Choice _ -> Message.ShowSearch",
            "\t\t}",
            "\t| SearchCompany ->",
            "\t\tconsole {",
            "\t\t\tlet validator =",
            "\t\t\t\tSome",
            "\t\t\t\t<| (fun (answer: string) ->",
            "\t\t\t\t\tif answer.Length < 3 then",
            "\t\t\t\t\t\tSpectre.Console.ValidationResult.Error(\"Search must be at least 3 characters\")",
            "\t\t\t\t\telse",
            "\t\t\t\t\t\tSpectre.Console.ValidationResult.Success())",
            "",
            "\t\t\tlet searchTerm =",
            "\t\t\t\ttextPrompt {",
            "\t\t\t\t\tquestion \"Search for company name: \"",
            "\t\t\t\t\tvalidation validator",
            "\t\t\t\t}",
            "",
            "\t\t\treturn searchTerm |> SearchForCompany",
            "\t\t}",
            "\t| NoCompanyFound searchTerm ->",
            "\t\tconsole {",
            "\t\t\terror { description \\$\"No company found for search term {searchTerm}\" }",
            "\t\t\treturn ShowSearch",
            "\t\t}",
            "\t| SearchCompanyResult searchresults ->",
            "\t\tlet selectionOptions =",
            "\t\t\t(searchresults.SearchResult",
            "\t\t\t |> Seq.map (fun result ->",
            "\t\t\t\t \\$\"{result.OrgNr |> OrgNr.value} {result.Name}\"",
            "\t\t\t\t |> Choice)",
            "\t\t\t |> Seq.toList)",
            "\t\t\t@ [ \"New search\" |> Choice",
            "\t\t\t\t\"Exit\" |> Choice ]",
            "",
            "\t\tconsole {",
            "\t\t\tlet choice =",
            "\t\t\t\tselection {",
            "\t\t\t\t\ttitle \"Search results, select company to view details\"",
            "\t\t\t\t\tchoices selectionOptions",
            "\t\t\t\t}",
            "",
            "\t\t\treturn",
            "\t\t\t\tmatch choice with",
            "\t\t\t\t| Choice \"New search\" -> ShowSearch",
            "\t\t\t\t| Choice \"Exit\" -> ExitScreen",
            "\t\t\t\t| Choice companyname ->",
            "\t\t\t\t\tlet orgnr = companyname.[0..9]",
            "\t\t\t\t\torgnr |> OrgNr |> Message.ShowCompanyDetails",
            "\t\t}",
            "\t| CompanyDetails (searchResult, jsonstring) ->",
            "\t\tlet selectionOptions =",
            "\t\t\t[ \"Back\"; \"New Search\"; \"Exit\" ]",
            "\t\t\t|> List.map Choice",
            "",
            "\t\tconsole {",
            "\t\t\tjsonview { json jsonstring }",
            "",
            "\t\t\tlet choice =",
            "\t\t\t\tselection {",
            "\t\t\t\t\ttitle \"What now?\"",
            "\t\t\t\t\tchoices selectionOptions",
            "\t\t\t\t}",
            "",
            "\t\t\treturn",
            "\t\t\t\tmatch choice with",
            "\t\t\t\t| Choice \"Back\" -> BackToSearchResult",
            "\t\t\t\t| Choice \"New Search\" -> ShowSearch",
            "\t\t\t\t| Choice \"Exit\" -> ExitScreen",
            "\t\t\t\t| _ -> failwith \"Invalid choice\"",
            "\t\t}",
            "\t| Exit ->",
            "\t\tconsole {",
            "\t\t\tfiglet {",
            "\t\t\t\ttext \"K. Thanks. Bye\"",
            "\t\t\t\taligned Left",
            "\t\t\t}",
            "",
            "\t\t\treturn Exited",
            "\t\t}",
            ""
        ],
        "description": "Full view function"
    },
	"fupdate": {
        "prefix": "fupdate",
        "body": [
            "let update model message =",
            "\tmatch message with",
            "\t| ShowSearch -> Model.SearchCompany |> Some",
            "\t| SearchForCompany searchTerm ->",
            "\t\tlet searchResult =",
            "\t\t\tsearchTerm",
            "\t\t\t|> Brreg.search",
            "\t\t\t|> Array.truncate 10",
            "\t\t\t|> Array.map (fun r ->",
            "\t\t\t\t{ Name = r.Navn",
            "\t\t\t\t  OrgNr = r.OrgNr |> string |> OrgNr })",
            "",
            "\t\tmatch searchResult.Length with",
            "\t\t| 0 -> searchTerm |> NoCompanyFound |> Some",
            "\t\t| _ ->",
            "\t\t\t{ SearchTerm = searchTerm",
            "\t\t\t  SearchResult = searchResult }",
            "\t\t\t|> SearchCompanyResult",
            "\t\t\t|> Some",
            "\t| BackToSearchResult ->",
            "\t\tmatch model with",
            "\t\t| CompanyDetails (searchResult, _) -> searchResult |> Model.SearchCompanyResult |> Some",
            "\t\t| _ -> failwith \"Invalid state transition\"",
            "\t| ShowCompanyDetails (OrgNr orgnr) ->",
            "\t\tmatch model with",
            "\t\t| SearchCompanyResult searchResult ->",
            "\t\t\tlet companyDetails = orgnr |> Brreg.companyDetails",
            "",
            "\t\t\t(searchResult, companyDetails)",
            "\t\t\t|> CompanyDetails",
            "\t\t\t|> Some",
            "\t\t| _ -> failwith \"Invalid state transition\"",
            "\t| ExitScreen -> Model.Exit |> Some",
            "\t| Exited -> None",
            ""
        ],
        "description": "Full update"
    },
	"loop": {
        "prefix": "loop",
        "body": [
            "let rec mvuloop model =",
            "\t\tmatch model |> view |> update model with",
            "\t\t| Some newModel -> newModel |> mvuloop",
			"\t\t| None -> ()",
            ""
        ],
        "description": "Loop"
    },
	"smessage": {
        "prefix": "smessage",
        "body": [
            "type Message =",
            "\t| ShowSearch",
            "\t| SearchForCompany of string",
            "\t| Exited"
        ],
        "description": "small message"
    },
	"smodel": {
        "prefix": "smodel",
        "body": [
            "type Model =",
            "\t| SearchCompany",
            "\t| SearchCompanyResult of SearchCompanyResults"
        ],
        "description": "Small model"
    },
	"vsearch": {
        "prefix": "vsearch",
        "body": [
            "console {",
            "\t\t\tlet validator =",
            "\t\t\t\tSome",
            "\t\t\t\t<| (fun (answer: string) ->",
            "\t\t\t\t\tif answer.Length < 3 then",
            "\t\t\t\t\t\tSpectre.Console.ValidationResult.Error(\"Search must be at least 3 characters\")",
            "\t\t\t\t\telse",
            "\t\t\t\t\t\tSpectre.Console.ValidationResult.Success())",
            "",
            "\t\t\tlet searchTerm =",
            "\t\t\t\ttextPrompt {",
            "\t\t\t\t\tquestion \"Search for company name: \"",
            "\t\t\t\t\tvalidation validator",
            "\t\t\t\t}",
            "",
            "\t\t\treturn searchTerm |> SearchForCompany",
            "\t\t}"
        ],
        "description": "View search company"
    },
	"vresult": {
        "prefix": "vresult",
        "body": [
            " let selectionOptions = [ \"New search\" |> Choice; \"Exit\" |> Choice ]",
            "",
            "\t\tconsole {",
            "\t\t\tlet choice =",
            "\t\t\t\tselection {",
            "\t\t\t\t\ttitle \"Search results, select company to view details\"",
            "\t\t\t\t\tchoices selectionOptions",
            "\t\t\t\t}",
            "",
            "\t\t\treturn",
            "\t\t\t\tmatch choice with",
            "\t\t\t\t| Choice \"New search\" -> ShowSearch",
            "\t\t\t\t| Choice \"Exit\" -> Exited",
            "\t\t}"
        ],
        "description": "View Search result"
    },
	"supdate": {
        "prefix": "supdate",
        "body": [
            "let update model message =",
            "\tmatch message with",
            "\t| ShowSearch -> Model.SearchCompany |> Some",
            "\t| SearchForCompany searchTerm ->",
            "\t\tlet searchResult =",
            "\t\t\tsearchTerm",
            "\t\t\t|> Brreg.search",
            "\t\t\t|> Array.truncate 10",
            "\t\t\t|> Array.map (fun r ->",
            "\t\t\t\t{ Name = r.Navn",
            "\t\t\t\t  OrgNr = r.OrgNr |> string |> OrgNr })",
            "",
            "\t\t{ SearchTerm = searchTerm; SearchResult = searchResult }",
            "\t\t|> SearchCompanyResult",
            "\t\t|> Some",
            "\t| Exited -> None"
        ],
        "description": "small update"
    }
}